{
	"info": {
		"_postman_id": "b586bf83-1c7a-4ce7-b32b-eac071fff649",
		"name": "2021 Contact List",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Smoke Tests",
			"item": [
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Setup: Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"userId\", jsonData.user._id)",
											"pm.environment.set(\"token\", jsonData.token)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
											"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"contactId\", jsonData._id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contact List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response contains firstName\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"firstName\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Prunewhip\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1969-12-13\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"kristinmjackvony@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"9789872518\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"14 Jenna Ct.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Apartment Q\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"North Scituate\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"RI\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"02857\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"USA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Joe\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1965-09-04\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"kjackvony@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"6179433750\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"129 Quaker Lane\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 2\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Framingham\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"MA\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"01701\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"Canada\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"birthdate\": \"1965-09-04\",\n    \"email\": \"kjackvony@gmail.com\",\n    \"phone\": \"6179433750\",\n    \"street1\": \"129 Quaker Lane\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Canada\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Kristin\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1965-09-04\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"kjackvony@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"6179433750\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"129 Quaker Lane\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 2\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Framingham\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"MA\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"01701\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"Canada\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Kristin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Deletion success message received\", function () {",
											"    pm.response.to.have.body(\"Contact deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify Contact Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"userId\", jsonData.user._id)",
											"pm.environment.set(\"token\", jsonData.token)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
											"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"UserId is correct\", function () {",
											"    pm.expect(jsonData._id).to.eql(environment.userId);",
											"});",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(environment.firstName);",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(environment.lastName);",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(environment.email);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"newFirstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
											"pm.environment.set(\"newLastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
											"pm.environment.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
											"pm.environment.set(\"newPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"UserId is correct\", function () {",
											"    pm.expect(jsonData._id).to.eql(environment.userId);",
											"});",
											"pm.test(\"First name is updated\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(environment.newFirstName);",
											"});",
											"pm.test(\"Last name is updated\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(environment.newLastName);",
											"});",
											"pm.test(\"Email is updated\", function () {",
											"    pm.expect(jsonData.email).to.eql(environment.newEmail);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log Out User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/logout",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log In User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"token\", jsonData.token)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"UserId is correct\", function () {",
											"    pm.expect(jsonData.user._id).to.eql(environment.userId);",
											"});",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.user.firstName).to.eql(environment.newFirstName);",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.user.lastName).to.eql(environment.newLastName);",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.user.email).to.eql(environment.newEmail);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users/login",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify User Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Regression Tests",
			"item": [
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Contact",
							"item": [
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDI1ZTA0NDk0Mjk1MjEyOTE1NTIzMzgiLCJpYXQiOjE2MTMwOTQ5OTV9.uCH2wHB4zoq5OAjSY5JmpTLYnjEeQEhu8JhwUqO7yK8",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Required Fields Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"contactId\", jsonData._id);",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing First Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing first name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` is required\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Abcdefghijklmnopqrstu\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Last Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing last name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` is required\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Abcdefghijklmnopqrstu\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Valid Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"2021-02-29\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Email- Not An Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too short email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"a@b.c\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnose@frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnosea.frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnos\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Phone- Not A Phone Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Phone number is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`phone` (`1234567890123456`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"1234567890123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 1 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 1 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street1` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street1\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 2 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 2 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street2` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street2\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "City Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long city message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`city` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"city\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "StateProvince Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid stateProvince message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`stateProvince` (`Frosty the snowman wa`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"stateProvince\": \"Frosty the snowman wa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Postal Code- Not A Postal Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Postal code is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Postal Code Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`postalCode` (`12345678901`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"12345678901\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Deletion success message received\", function () {",
													"    pm.response.to.have.body(\"Contact deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Contact List",
							"item": [
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Contact",
							"item": [
								{
									"name": "Setup: Add Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"contactId\", jsonData._id);",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Contact Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid contact ID error message is correct\", function () {",
													"    pm.response.to.have.body(\"Invalid Contact ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/foobar",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"foobar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Contact Id Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/6008c8d653599c2dcf4407f0",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"6008c8d653599c2dcf4407f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Deletion success message received\", function () {",
													"    pm.response.to.have.body(\"Contact deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update Contact",
							"item": [
								{
									"name": "Setup: Add Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"contactId\", jsonData._id);",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"birthdate\": \"1965-09-04\",\n    \"email\": \"kjackvony@gmail.com\",\n    \"phone\": \"6179433750\",\n    \"street1\": \"129 Quaker Lane\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Canada\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"birthdate\": \"1965-09-04\",\n    \"email\": \"kjackvony@gmail.com\",\n    \"phone\": \"6179433750\",\n    \"street1\": \"129 Quaker Lane\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Canada\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"birthdate\": \"1965-09-04\",\n    \"email\": \"kjackvony@gmail.com\",\n    \"phone\": \"6179433750\",\n    \"street1\": \"129 Quaker Lane\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Canada\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Contact Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid contact ID error message is correct\", function () {",
													"    pm.response.to.have.body(\"Invalid Contact ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/foobar",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"foobar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Contact Id Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/6008c8d653599c2dcf4407f0",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"6008c8d653599c2dcf4407f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Required Fields Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Joe\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
													"});",
													"pm.test(\"Birthdate is null\", function () {",
													"    pm.expect(jsonData.birthdate).to.be.null;",
													"});",
													"pm.test(\"Email is null\", function () {",
													"    pm.expect(jsonData.email).to.be.null;",
													"});",
													"pm.test(\"Phone is null\", function () {",
													"    pm.expect(jsonData.phone).to.be.null;",
													"});",
													"pm.test(\"Street 1 is null\", function () {",
													"    pm.expect(jsonData.street1).to.be.null;",
													"});",
													"pm.test(\"Street 2 is null\", function () {",
													"    pm.expect(jsonData.street2).to.be.null;",
													"});",
													"pm.test(\"City is null\", function () {",
													"    pm.expect(jsonData.city).to.be.null;",
													"});",
													"pm.test(\"State or province is null\", function () {",
													"    pm.expect(jsonData.stateProvince).to.be.null;",
													"});",
													"pm.test(\"Postal code is null\", function () {",
													"    pm.expect(jsonData.postalCode).to.be.null;",
													"});",
													"pm.test(\"Country is null\", function () {",
													"    pm.expect(jsonData.country).to.be.null;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing First Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing first name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` is required\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Abcdefghijklmnopqrstu\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Last Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing last name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` is required\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Abcdefghijklmnopqrstu\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Valid Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"2021-02-29\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Email- Not An Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too short email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"a@b.c\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnose@frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnosea.frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnos\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Phone- Not A Phone Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Phone number is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`phone` (`1234567890123456`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"1234567890123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 1 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 1 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street1` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street1\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 2 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 2 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street2` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street2\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "City Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long city message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`city` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"city\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "StateProvince Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid stateProvince message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`stateProvince` (`Frosty the snowman wa`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"stateProvince\": \"Frosty the snowman wa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Postal Code- Not A Postal Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Postal code is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Postal Code Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`postalCode` (`12345678901`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"12345678901\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Deletion success message received\", function () {",
													"    pm.response.to.have.body(\"Contact deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Partial Update Contact",
							"item": [
								{
									"name": "Setup: Add Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"contactId\", jsonData._id);",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Kristin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Kristin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Kristin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Contact Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid contact ID error message is correct\", function () {",
													"    pm.response.to.have.body(\"Invalid Contact ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/foobar",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"foobar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Contact Id Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/6008c8d653599c2dcf4407f0",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"6008c8d653599c2dcf4407f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Last Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
													"});",
													"pm.test(\"Birthdate is correct\", function () {",
													"    pm.expect(jsonData.birthdate).to.eql(\"1969-12-13\");",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.email).to.eql(\"kristinmjackvony@gmail.com\");",
													"});",
													"pm.test(\"Phone is correct\", function () {",
													"    pm.expect(jsonData.phone).to.eql(\"9789872518\");",
													"});",
													"pm.test(\"Street 1 is correct\", function () {",
													"    pm.expect(jsonData.street1).to.eql(\"14 Jenna Ct.\");",
													"});",
													"pm.test(\"Street 2 is correct\", function () {",
													"    pm.expect(jsonData.street2).to.eql(\"Apartment Q\");",
													"});",
													"pm.test(\"City is correct\", function () {",
													"    pm.expect(jsonData.city).to.eql(\"North Scituate\");",
													"});",
													"pm.test(\"State or province is correct\", function () {",
													"    pm.expect(jsonData.stateProvince).to.eql(\"RI\");",
													"});",
													"pm.test(\"Postal code is correct\", function () {",
													"    pm.expect(jsonData.postalCode).to.eql(\"02857\");",
													"});",
													"pm.test(\"Country is correct\", function () {",
													"    pm.expect(jsonData.country).to.eql(\"USA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
													"});",
													"pm.test(\"Birthdate is correct\", function () {",
													"    pm.expect(jsonData.birthdate).to.eql(\"1969-12-13\");",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.email).to.eql(\"pprunewhip@fake.com\");",
													"});",
													"pm.test(\"Phone is correct\", function () {",
													"    pm.expect(jsonData.phone).to.eql(\"9789872518\");",
													"});",
													"pm.test(\"Street 1 is correct\", function () {",
													"    pm.expect(jsonData.street1).to.eql(\"14 Jenna Ct.\");",
													"});",
													"pm.test(\"Street 2 is correct\", function () {",
													"    pm.expect(jsonData.street2).to.eql(\"Apartment Q\");",
													"});",
													"pm.test(\"City is correct\", function () {",
													"    pm.expect(jsonData.city).to.eql(\"North Scituate\");",
													"});",
													"pm.test(\"State or province is correct\", function () {",
													"    pm.expect(jsonData.stateProvince).to.eql(\"RI\");",
													"});",
													"pm.test(\"Postal code is correct\", function () {",
													"    pm.expect(jsonData.postalCode).to.eql(\"02857\");",
													"});",
													"pm.test(\"Country is correct\", function () {",
													"    pm.expect(jsonData.country).to.eql(\"USA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"pprunewhip@fake.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Abcdefghijklmnopqrstu\",\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Abcdefghijklmnopqrstu\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Birthdate- Not A Valid Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid birthdate error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Birthdate is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"2021-02-29\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Email- Not An Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too short email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"a@b.c\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnose@frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnosea.frostythesnowmanwasajollyhappysoulwithacorncobpipeandabuttonnos\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Phone- Not A Phone Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Phone number is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Phone Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long phone error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`phone` (`1234567890123456`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"phone\": \"1234567890123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 1 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 1 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street1` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street1\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Street 2 Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long street 2 message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`street2` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"street2\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "City Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long city message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`city` (`Frosty the snowman was a jolly happy soul`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"city\": \"Frosty the snowman was a jolly happy soul\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid StateProvince- Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid stateProvince message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`stateProvince` (`Frosty the snowman wa`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"stateProvince\": \"Frosty the snowman wa\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Postal Code- Not A Postal Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Postal code is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Postal Code Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Too long postal code message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`postalCode` (`12345678901`) is longer than the maximum allowed length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"postalCode\": \"12345678901\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Deletion success message received\", function () {",
													"    pm.response.to.have.body(\"Contact deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Contact",
							"item": [
								{
									"name": "Setup: Add Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"contactId\", jsonData._id);",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Contact Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Invalid contact ID error message is correct\", function () {",
													"    pm.response.to.have.body(\"Invalid Contact ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/foobar",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"foobar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Contact Id Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/contacts/6008c8d653599c2dcf4407f0",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"6008c8d653599c2dcf4407f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete Contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Deletion success message received\", function () {",
													"    pm.response.to.have.body(\"Contact deleted\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/contacts/{{contactId}}",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"contacts",
												"{{contactId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Add User",
							"item": [
								{
									"name": "Missing First Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing first name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Abcdefghijklmnopqrstu\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Last Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing last name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Last name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Abcdefghijklmnopqrstu\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup: Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Duplicate email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email address is already in use\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing password error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`password` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Password Too Short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing password error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`password` (`foobar`) is shorter than the minimum allowed length (7)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Password Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing password error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`password` (`abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw`) is longer than the maximum allowed length (100)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"email\": \"{{email}}\",\n    \"password\": \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get User Profile",
							"item": [
								{
									"name": "MIssing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tokenNotFound}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update User",
							"item": [
								{
									"name": "Setup: Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"newFirstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"newLastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"newPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"newFirstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"newLastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"newPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDI1ZTA0NDk0Mjk1MjEyOTE1NTIzMzgiLCJpYXQiOjE2MTMwOTQ5OTV9.uCH2wHB4zoq5OAjSY5JmpTLYnjEeQEhu8JhwUqO7yK8",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"newFirstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"newLastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"newPassword\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{newFirstName}}\",\n    \"lastName\": \"{{newLastName}}\",\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"{{newPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"UserId is correct\", function () {",
													"    pm.expect(jsonData._id).to.eql(environment.userId);",
													"});",
													"pm.test(\"First name is updated\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(environment.lastName);",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.email).to.eql(environment.email);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Prunella\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"UserId is correct\", function () {",
													"    pm.expect(jsonData._id).to.eql(environment.userId);",
													"});",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is updated\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Prunewhip\");",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.email).to.eql(environment.email);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"Prunewhip\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Email Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"UserId is correct\", function () {",
													"    pm.expect(jsonData._id).to.eql(environment.userId);",
													"});",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Prunewhip\");",
													"});",
													"pm.test(\"Email is updated\", function () {",
													"    pm.expect(jsonData.email).to.eql(environment.newEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{newEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Password Only",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"UserId is correct\", function () {",
													"    pm.expect(jsonData._id).to.eql(environment.userId);",
													"});",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.lastName).to.eql(\"Prunewhip\");",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.email).to.eql(environment.newEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log Out User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/logout",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Log In User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"UserId is correct\", function () {",
													"    pm.expect(jsonData.user._id).to.eql(environment.userId);",
													"});",
													"pm.test(\"First name is correct\", function () {",
													"    pm.expect(jsonData.user.firstName).to.eql(\"Prunella\");",
													"});",
													"pm.test(\"Last name is correct\", function () {",
													"    pm.expect(jsonData.user.lastName).to.eql(\"Prunewhip\");",
													"});",
													"pm.test(\"Email is correct\", function () {",
													"    pm.expect(jsonData.user.email).to.eql(environment.newEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{newEmail}}\",\n    \"password\": \"foobarfoo\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing First Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing first name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"\",\n    \"lastName\": \"Schmoe\",\n    \"email\": \"f{{email}}\",\n    \"password\": \"barfoobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "First Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"First name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`firstName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Abcdefghijklmnopqrstu\",\n    \"lastName\": \"Schmoe\",\n    \"email\": \"{{email}}\",\n    \"password\": \"barfoobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Last Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing last name error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"\",\n    \"email\": \"{{email}}\",\n    \"password\": \"barfoobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Last Name Too Long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Last name too long error message is returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`lastName` (`Abcdefghijklmnopqrstu`) is longer than the maximum allowed length (20)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Abcdefghijklmnopqrstu\",\n    \"email\": \"{{email}}\",\n    \"password\": \"barfoobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing email error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Email is invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"email\": \"\",\n    \"password\": \"barfoobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing password error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`password` is required\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"email\": \"{{email}}\",\n    \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Password Too Short",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Missing password error message returned\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"`password` (`foobar`) is shorter than the minimum allowed length (7)\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"email\": \"{{email}}\",\n    \"password\": \"foobar\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete User",
							"item": [
								{
									"name": "Setup: Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDI1ZTA0NDk0Mjk1MjEyOTE1NTIzMzgiLCJpYXQiOjE2MTMwOTQ5OTV9.uCH2wHB4zoq5OAjSY5JmpTLYnjEeQEhu8JhwUqO7yK8",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Log In User",
							"item": [
								{
									"name": "Setup: Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"Password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Setup: Log Out User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/logout",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty|Empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty|Incorrect",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"wrongwrong\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty|Wrong Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Empty|Correct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"\",\n    \"password\": \"Password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect|Incorrect",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"wrong@wrong.com\",\n    \"password\": \"wrongwrong\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect|Wrong Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"wrong@wrong.com\",\n    \"password\": \"password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Incorrect|Correct",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"wrong@wrong.com\",\n    \"password\": \"Password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Correct|Empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Correct|Incorrect",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"wrongwrong\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Correct|Wrong Case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Log In User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"Password123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users/login",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Log Out User",
							"item": [
								{
									"name": "Setup: Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userId\", jsonData.user._id)",
													"pm.environment.set(\"token\", jsonData.token)",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'));",
													"pm.environment.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}'));",
													"pm.environment.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
													"pm.environment.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}').toLowerCase());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:3000/users",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Missing Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:3000/users/logout",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token Not Found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MDI1ZTA0NDk0Mjk1MjEyOTE1NTIzMzgiLCJpYXQiOjE2MTMwOTQ5OTV9.uCH2wHB4zoq5OAjSY5JmpTLYnjEeQEhu8JhwUqO7yK8",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/logout",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer FOO",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/logout",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"logout"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cleanup: Delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "localhost:3000/users/me",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"users",
												"me"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User-Contact Relationship",
					"item": [
						{
							"name": "Setup: Add User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"userId2\", jsonData.user._id)",
											"pm.environment.set(\"token2\", jsonData.token)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"email2\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
											"pm.environment.set(\"password2\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"User2\",\n    \"email\": \"{{email2}}\",\n    \"password\": \"{{password2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Setup: Add User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"userId1\", jsonData.user._id)",
											"pm.environment.set(\"token1\", jsonData.token)",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"email1\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase());",
											"pm.environment.set(\"password1\", pm.variables.replaceIn('{{$randomPassword}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Test\",\n    \"lastName\": \"User1\",\n    \"email\": \"{{email1}}\",\n    \"password\": \"{{password1}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/users",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Contact 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"contactId1\", jsonData._id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Prunella\",\n    \"lastName\": \"Prunewhip\",\n    \"birthdate\": \"1969-12-13\",\n    \"email\": \"kristinmjackvony@gmail.com\",\n    \"phone\": \"9789872518\",\n    \"street1\": \"14 Jenna Ct.\",\n    \"street2\": \"Apartment Q\",\n    \"city\": \"North Scituate\",\n    \"stateProvince\": \"RI\",\n    \"postalCode\": \"02857\",\n    \"country\": \"USA\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Contact 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"contactId2\", jsonData._id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Schmoe\",\n    \"birthdate\": \"1965-09-04\",\n    \"email\": \"kjackvony@gmail.com\",\n    \"phone\": \"6179433750\",\n    \"street1\": \"129 Quaker Lane\",\n    \"street2\": \"Apartment B\",\n    \"city\": \"Newport\",\n    \"stateProvince\": \"NH\",\n    \"postalCode\": \"03773\",\n    \"country\": \"Canada\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact List as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"One record is returned\", function () {",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"pm.test(\"ID is correct\", function () {",
											"    pm.expect(jsonData[0]._id).to.eql(environment.contactId1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact List as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"One record is returned\", function () {",
											"    pm.expect(jsonData.length).to.equal(1);",
											"});",
											"pm.test(\"ID is correct\", function () {",
											"    pm.expect(jsonData[0]._id).to.eql(environment.contactId2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Prunella\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Prunewhip\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1969-12-13\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"kristinmjackvony@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"9789872518\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"14 Jenna Ct.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Apartment Q\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"North Scituate\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"RI\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"02857\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"USA\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Joe\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Schmoe\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1965-09-04\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"kjackvony@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"6179433750\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"129 Quaker Lane\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Apartment B\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Newport\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"NH\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"03773\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"Canada\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Serge\",\n    \"lastName\": \"Roger\",\n    \"birthdate\": \"1996-06-10\",\n    \"email\": \"peterbrian96@gmail.com\",\n    \"phone\": \"5083087301\",\n    \"street1\": \"4 Lorraine St.\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Mexico\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Serge\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Roger\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1996-06-10\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"peterbrian96@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"5083087301\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"4 Lorraine St.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 2\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Framingham\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"MA\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"01701\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"Mexico\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Serge\",\n    \"lastName\": \"Roger\",\n    \"birthdate\": \"1996-06-10\",\n    \"email\": \"peterbrian96@gmail.com\",\n    \"phone\": \"5083087301\",\n    \"street1\": \"4 Lorraine St.\",\n    \"street2\": \"Unit 2\",\n    \"city\": \"Framingham\",\n    \"stateProvince\": \"MA\",\n    \"postalCode\": \"01701\",\n    \"country\": \"Mexico\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Deborah\",\n    \"lastName\": \"Clarke\",\n    \"birthdate\": \"1987-06-07\",\n    \"email\": \"deborahclarke@proton.com\",\n    \"phone\": \"6178627927\",\n    \"street1\": \"62 Dexter Rd.\",\n    \"street2\": \"Unit 1\",\n    \"city\": \"Lexington\",\n    \"stateProvince\": \"KY\",\n    \"postalCode\": \"02173\",\n    \"country\": \"UK\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Deborah\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Clarke\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1987-06-07\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"deborahclarke@proton.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"6178627927\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"62 Dexter Rd.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 1\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Lexington\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"KY\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"02173\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"UK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Deborah\",\n    \"lastName\": \"Clarke\",\n    \"birthdate\": \"1987-06-07\",\n    \"email\": \"deborahclarke@proton.com\",\n    \"phone\": \"6178627927\",\n    \"street1\": \"62 Dexter Rd.\",\n    \"street2\": \"Unit 1\",\n    \"city\": \"Lexington\",\n    \"stateProvince\": \"KY\",\n    \"postalCode\": \"02173\",\n    \"country\": \"UK\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Kristin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Kristin\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Roger\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1996-06-10\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"peterbrian96@gmail.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"5083087301\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"4 Lorraine St.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 2\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Framingham\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"MA\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"01701\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"Mexico\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Kristin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Jack\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var jsonData = pm.response.json();",
											"pm.test(\"First name is correct\", function () {",
											"    pm.expect(jsonData.firstName).to.eql(\"Jack\");",
											"});",
											"pm.test(\"Last name is correct\", function () {",
											"    pm.expect(jsonData.lastName).to.eql(\"Clarke\");",
											"});",
											"pm.test(\"Birthdate is correct\", function () {",
											"    pm.expect(jsonData.birthdate).to.eql(\"1987-06-07\");",
											"});",
											"pm.test(\"Email is correct\", function () {",
											"    pm.expect(jsonData.email).to.eql(\"deborahclarke@proton.com\");",
											"});",
											"pm.test(\"Phone is correct\", function () {",
											"    pm.expect(jsonData.phone).to.eql(\"6178627927\");",
											"});",
											"pm.test(\"Street 1 is correct\", function () {",
											"    pm.expect(jsonData.street1).to.eql(\"62 Dexter Rd.\");",
											"});",
											"pm.test(\"Street 2 is correct\", function () {",
											"    pm.expect(jsonData.street2).to.eql(\"Unit 1\");",
											"});",
											"pm.test(\"City is correct\", function () {",
											"    pm.expect(jsonData.city).to.eql(\"Lexington\");",
											"});",
											"pm.test(\"State or province is correct\", function () {",
											"    pm.expect(jsonData.stateProvince).to.eql(\"KY\");",
											"});",
											"pm.test(\"Postal code is correct\", function () {",
											"    pm.expect(jsonData.postalCode).to.eql(\"02173\");",
											"});",
											"pm.test(\"Country is correct\", function () {",
											"    pm.expect(jsonData.country).to.eql(\"UK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Jack\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 1 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Deletion success message received\", function () {",
											"    pm.response.to.have.body(\"Contact deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId1}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact 2 as User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Deletion success message received\", function () {",
											"    pm.response.to.have.body(\"Contact deleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/contacts/{{contactId2}}",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"contacts",
										"{{contactId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete User 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cleanup: Delete User 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token2}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:3000/users/me",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}